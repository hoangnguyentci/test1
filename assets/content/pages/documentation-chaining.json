{"pageTitle":"Documentation Chaining","pageBlocks":[{"sectionEntryTitle":"Documentation Listing Chain Section","sectionMessage":"# Chaining improved #\n\nThis approach uses your listing as an anchor to carry out tasks on a chain. Adding to a chain is easier, checking a chain is easier, there's now no need for you to store anything other than the View My Chain listing id. The original methods as documented below are still valid; the only action that cannot be carried out this way is breaking a chain, View My Chain still needs to know which two listings it is breaking apart.\n\n### Checking a chain ###\nTo check or uncheck the top or bottom of a chain it is as simple as hitting one of 4 endpoints:\n\n| Action     | Endpoint     |\n| ---------- | ---------- |\n| Check Top       | `https:\/\/admin.viewmychain.com\/api\/v1\/listing\/chain\/{listing}\/check\/top`       |\n| Check Bottom       | `https:\/\/admin.viewmychain.com\/api\/v1\/listing\/chain\/{listing}\/check\/bottom`       |\n| Uncheck Top       | `https:\/\/admin.viewmychain.com\/api\/v1\/listing\/chain\/{listing}\/uncheck\/top`       |\n| Uncheck Bottom       | `https:\/\/admin.viewmychain.com\/api\/v1\/listing\/chain\/{listing}\/uncheck\/bottom`       |\n\n### Adding to a chain ###\n\nYou can add to the top and the bottom fo a chain, the first listing id is yours, this represents the chain your listing is in. The second listing id the id of the listing you want to add to the chain. Finally, you need to decide if you're adding to the `top` or `bottom` of the chain:\n\n| Action | Endpoint |\n| ------ | -------- |\n| Top    | `https:\/\/admin.viewmychain.com\/api\/v1\/listing\/chain\/{listing}\/add\/top\/{listing_link_id}` |\n| Bottom | `https:\/\/admin.viewmychain.com\/api\/v1\/listing\/chain\/{listing}\/add\/bottom\/{listing_link_id}` |\n\n\n### The response ###\nIf any of the above are successful, the response you get is a simple success response, because you no longer need to care about the `chain_link_id`, it is unnessecary to have a response sent back to you with all the new information, you already have all the information you need to represent your chain, and there is no new information. In light of this we recommend that when you are retrieving chain information, you use opt to include `chained_listings` with your listing get request.","sectionType":"StandardSection","sysMeta":{"createdAt":"2018-06-06T07:47:42.880Z","updatedAt":"2018-06-06T07:47:42.880Z","contentType":"section"}},{"sectionEntryTitle":"Documentation Chaining Section","sectionMessage":"# Chains #\n\n### Chaining Listings ###\nView My Chain wouldn't be View My Chain if you couldn't create and manage chains. We'll begin with chaining one listing to another. First, make sure both the listings exist and if not create them. If you're unsure how to do this go back to the [Creating a Listing](\/docs\/creating-a-listing) tutorial. Chaining two listings together is very easy, of the two listings identify which one is **buying** the other, that one becomes the `buyer` and the other the `seller`; the `buyer` buys from the `seller`, and the `seller` sells to the `buyer`. Now its a case of making a simple request passing in the `buyer` and `seller`. The attributes you supply are the listing `id`'s.\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X POST -d '{\"seller\": 1, \"buyer\": 2}' \\\n  https:\/\/admin.viewmychain.com\/api\/v1\/chain\/add\/link\n```\n\nIf successful, you will receive a response with both the listings objects. Notice that the `chain_link_id` has been updated, and each listings `chain_link_id` matches, this is because they are now part of the same chain. \n\n> Note: You can save the `chain_link_id` against your own data if you want to, but because other agents may interact with the chain, this could change as each break and addition can form a new chain with a new `chain_link_id`; we suggest you save the listing `id`, and retrieve the listing from View My Chain, and then use the `chain_link_id` in the response for future API calls.\n\nThis endpoint will only fail if you provide listing `id`s that do not exist, or the buyer or seller has a respecive seller or buyer. You can check whether a listing has a buyer or seller by retrieving the listing and including the buyer and\/or seller:\n\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X GET https:\/\/admin.viewmychain.com\/api\/v1\/listing\/1?includes=buyer,seller\n```\nThe response will look something like this:\n```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"listing\",\n    \"attributes\": {\n      \"address_id\": 12345678,\n      \"branch_id\": 1,\n      \"price\": 100000,\n      \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n      \"is_locked\": false,\n      \"full_address\": \"1 Sample Street, Sample Town, AB12 3CD\",\n      \"address_street_name\": \"1 Sample Street\",\n      \"address_area\": \"Sample Town\",\n      \"address_postal_code\": \"AB12 3CD\",\n      \"created_at\": 1511264955,\n      \"updated_at\": 1511264955\n    },\n    \"relationships\": {\n      \"buyer\":{\n        \"data\": {\n          \"type\": \"buyer\",\n          \"id\": 2\n        }\n      },\n      \"seller\": {\n        \"data\": {\n          \"type\": \"seller\",\n          \"id\": 3\n        }\n      }\n    }\n  },\n  \"included\": {\n    \"data\": [{\n      \"id\": 2,\n      \"type\": \"buyer\",\n      \"attributes\": {\n        \"address_id\": 7345872548,\n        \"branch_id\": 35439,\n        \"price\": 100000,\n        \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n        \"is_locked\": false,\n        \"full_address\": \"2 Fake  Road, Fake Town, DC12 3AB\",\n        \"address_street_name\": \"2 Fake Road\",\n        \"address_area\": \"Fake Town\",\n        \"address_postal_code\": \"DC12 3AB\",\n        \"created_at\": 1511264955,\n        \"updated_at\": 1511264955\n      }\n    }, {\n      \"id\": 3,\n      \"type\": \"seller\",\n      \"attributes\": {\n        \"address_id\": 35478873,\n        \"branch_id\": 5678,\n        \"price\": 100000,\n        \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n        \"is_locked\": false,\n        \"full_address\": \"3 High  Street, Some Where, TH12 3LO\",\n        \"address_street_name\": \"3 High Street\",\n        \"address_area\": \"Some Where\",\n        \"address_postal_code\": \"TH12 3LO\",\n        \"created_at\": 1511264955,\n        \"updated_at\": 1511264955\n      },\n    }]\n  }\n}\n```\nIf either the buyer or seller relation exists they will be present in the response.\n\n> The order of the includes can change depending on what includes you ask for.\n\nAs stated before, you will only be able to **get** a listing if it belongs to you, so if you want to add a link to a chain, that involves two listings that do not belong to your branch, you won't be able to check before hand. Also, you won't be able to create or break chains if one of your listings is not involved.\n\n> We have shown you how you can check before hand whether your listing has a buyer or seller, however, it may be just as quick to make the `link` request, and let the validation take over; the error message returned will tell you which listing of the link failed, and you can action accordingly. See the API reference for more information on the errors returned.\n\n**API Reference**\n[https:\/\/admin.viewmychain.com\/api\/v1\/chain\/add\/link](\/docs\/api\/#operation\/add-link)\n[https:\/\/admin.viewmychain.com\/api\/v1\/listing\/1](\/docs\/api\/#operation\/get-listing)\n\n\n### Breaking Chains ###\nBreaking a chain link is as simple a request as adding a chain link, you pass in the `buyer` and `seller` listing `id`s:\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X POST -d '{\"seller\": 1, \"buyer\": 2}' \\\n  https:\/\/admin.viewmychain.com\/api\/v1\/chain\/remove\/link\n```\nIf successful, the response will be a simple success response:\n```json\n{\n  \"message\": \"success\",\n  \"success\": true,\n  \"data\": [],\n  \"errors\": []\n}\n```\n\n**API References**\n[https:\/\/admin.viewmychain.com\/api\/v1\/chain\/remove\/link](\/docs\/api\/#operation\/remove-link)\n\n### Checking Chains ###\n\nAgain, checking chains is quite simple. You need three parameters, the `chain_link_id`, whether you're checking the `top` or bottom of the chain, and the `reason` for doing so.\n\nYou can get the `chain_link_id` from the listing, so make a call to get a listing of the chain you want to check, and then grab the `chain_link_id`. Then you set `top` to `true` or `false`, `true` if checking the top, `false` if you want to check the bottom. Then finally the `reason` for checking, currently there is only one reason `Checked`. So now we have our attributes its time to make the request:\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X POST -d '{\"reason\": \"Checked\", \"top\": true}' \\\n  https:\/\/admin.viewmychain.com\/api\/v1\/chain\/DFAD3925-0322-49F4-8F14-BF516CE96097\/check\n```\n\nIf successful you will get a simple success response:\n```json\n{\n  \"message\": \"success\",\n  \"success\": true,\n  \"data\": [],\n  \"errors\": []\n}\n```\n\nIf you would like to uncheck a chain, then the request is very similar, the only difference is the reasons available to you:\n\n| Reason           |\n| ---------------- |\n| Unspecified      |\n| Not EOC          |\n| Dont Know If EOC |\n\n> EOC stands for End of Chain\n\nThe request will look something like this:\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X POST -d '{\"reason\": \"Not EOC\", \"top\": true}' \\\n  https:\/\/admin.viewmychain.com\/api\/v1\/chain\/DFAD3925-0322-49F4-8F14-BF516CE96097\/uncheck\n```\n\nIf successful you will get a simple success response:\n```json\n{\n  \"message\": \"success\",\n  \"success\": true,\n  \"data\": [],\n  \"errors\": []\n}\n```\n\n**API References**\n[https:\/\/admin.viewmychain.com\/api\/v1\/chain\/{chain_link_id}\/check](\/docs\/api\/#operation\/check-chain)\n[https:\/\/admin.viewmychain.com\/api\/v1\/chain\/{chain_link_id}\/uncheck](\/docs\/api\/#operation\/uncheck-chain)\n\n### Retrieving a Chain ###\nAs part of your integration you will may like to display the chain in full, you can do this by using the chain listings endpoint:\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X GET https:\/\/admin.viewmychain.com\/api\/v1\/chain\/DFAD3925-0322-49F4-8F14-BF516CE96097\/listings\n```\nThis will return to you all listing objects within the given chain. The listings will be in order from bottom to top of chain.\n\nView My Chain displays a chain mini map on our application and that is achieved by returning chain data. Chain data is a few statistics about the chain from a given listings perspective, here's a breakdown of what's included:\n\n| Attribute | Example | Explanation |\n| --- | --- | --- |\n| id        | DFAD3925-0322-49F4-8F14-BF516CE96097 | This is the chain link id of the chain, it's what groups the listings together in chain |\n| length | 4 | This is the number of listings in a chain |\n| position | 2 | This attribute is 0 indexed, so 0 would be the first property, in this exmaple 2 is the third property. This matches common array indexing |\n| top_checked | true | Whether the top of the chain is checked |\n| bottom_checked | false | Whether the bottom of the chain is checked |\n\nTo get the chain data, you need to include it as part of the listing get request:\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X GET https:\/\/admin.viewmychain.com\/api\/v1\/listing\/1?includes=chain_data\n```\nThe response will look something like this:\n```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"listing\",\n    \"attributes\": {\n      \"address_id\": 12345678,\n      \"branch_id\": 1,\n      \"price\": 100000,\n      \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n      \"is_locked\": false,\n      \"full_address\": \"1 Sample Street, Sample Town, AB12 3CD\",\n      \"address_street_name\": \"1 Sample Street\",\n      \"address_area\": \"Sample Town\",\n      \"address_postal_code\": \"AB12 3CD\",\n      \"created_at\": 1511264955,\n      \"updated_at\": 1511264955\n    },\n    \"relationships\": {\n      \"chain_data\":{\n        \"data\": {\n          \"type\": \"chain_data\",\n          \"id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\"\n        }\n      }\n    }\n  },\n  \"included\": {\n    \"data\": [{\n      \"id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n      \"type\": \"chain_data\",\n      \"attributes\": {\n        \"length\": 4,\n        \"position\": 2,\n        \"top_checked\": true,\n        \"bottom_checked\": false\n      }\n    }]\n  }\n}\n```\n\nAlternatively, a quicker method is to include the chained listings from the get listing endpoint.\n```shell\ncurl \\\n  -H \"Content-Type: application\/json\" \\\n  -H \"Authorization: Bearer <YOUR-ACCESS-TOKEN>\" \\\n  -X GET https:\/\/admin.viewmychain.com\/api\/v1\/listing\/1?includes=chained_listings\n```\n\nThis will return the usual listing response, however, within the included attribute, you will now have the listings in the same chain as the given one. It will also include the given listing, and the listings will be in chain order from bottom of the chain to the top:\n\n```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"listing\",\n    \"attributes\": {\n      \"address_id\": 12345678,\n      \"branch_id\": 1,\n      \"price\": 100000,\n      \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n      \"is_locked\": false,\n      \"full_address\": \"1 Sample Street, Sample Town, AB12 3CD\",\n      \"address_street_name\": \"1 Sample Street\",\n      \"address_area\": \"Sample Town\",\n      \"address_postal_code\": \"AB12 3CD\",\n      \"created_at\": 1511264955,\n      \"updated_at\": 1511264955\n    },\n    \"relationships\": {\n      \"chained_listings\":{\n        \"data\": [\n          {\n            \"type\": \"chained_listing\",\n            \"id\": 2\n          },\n          {\n            \"type\": \"chained_listing\",\n            \"id\": 1\n          },\n          {\n            \"type\": \"chained_listing\",\n            \"id\": 3\n        ]\n      }\n    }\n  },\n  \"included\": {\n    \"data\": [{\n      \"id\": 2,\n      \"type\": \"chained_listing\",\n      \"attributes\": {\n        \"address_id\": 7345872548,\n        \"branch_id\": 35439,\n        \"price\": 100000,\n        \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n        \"is_locked\": false,\n        \"full_address\": \"2 Fake  Road, Fake Town, DC12 3AB\",\n        \"address_street_name\": \"2 Fake Road\",\n        \"address_area\": \"Fake Town\",\n        \"address_postal_code\": \"DC12 3AB\",\n        \"created_at\": 1511264955,\n        \"updated_at\": 1511264955\n      }\n    }, {\n      \"id\": 1,\n      \"type\": \"listing\",\n      \"attributes\": {\n        \"address_id\": 12345678,\n        \"branch_id\": 1,\n        \"price\": 100000,\n        \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n        \"is_locked\": false,\n        \"full_address\": \"1 Sample Street, Sample Town, AB12 3CD\",\n        \"address_street_name\": \"1 Sample Street\",\n        \"address_area\": \"Sample Town\",\n        \"address_postal_code\": \"AB12 3CD\",\n        \"created_at\": 1511264955,\n        \"updated_at\": 1511264955\n      }\n    }, {\n      \"id\": 3,\n      \"type\": \"chained_listing\",\n      \"attributes\": {\n        \"address_id\": 35478873,\n        \"branch_id\": 5678,\n        \"price\": 100000,\n        \"chain_link_id\": \"DFAD3925-0322-49F4-8F14-BF516CE96097\",\n        \"is_locked\": false,\n        \"full_address\": \"3 High  Street, Some Where, TH12 3LO\",\n        \"address_street_name\": \"3 High Street\",\n        \"address_area\": \"Some Where\",\n        \"address_postal_code\": \"TH12 3LO\",\n        \"created_at\": 1511264955,\n        \"updated_at\": 1511264955\n      },\n    }]\n  }\n}\n```\n\n**API References**\n[https:\/\/admin.viewmychain.com\/api\/v1\/chain\/{chain_link_id}\/listings](\/docs\/api\/#operation\/chain-listings)\n[https:\/\/admin.viewmychain.com\/api\/v1\/listing\/1](\/docs\/api\/#operation\/get-listing)","sectionClass":"standard--static","sectionType":"StandardSection","sysMeta":{"createdAt":"2018-01-26T09:54:04.401Z","updatedAt":"2018-02-07T14:34:28.625Z","contentType":"section"}}],"pageTemplate":"static","slug":"documentation-chaining","sysMeta":{"createdAt":"2018-01-26T08:25:30.392Z","updatedAt":"2018-07-10T13:43:58.081Z","contentType":"page"}}